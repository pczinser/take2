-- Building test script - attach to a debug game object

function init(self)
    msg.post(".", "acquire_input_focus")
    print("=== BUILDING TEST SCRIPT INITIALIZED ===")
    
    -- Register building templates with different sizes
    local entity_templates = {
        -- Single tile buildings
        conveyor = {
            type = "building",
            size = { width = 1, height = 1 },
            properties = { speed = 10.0 }
        },
        
        -- Multi-tile buildings
        factory = {
            type = "building",
            size = { width = 3, height = 3 },
            properties = { production_rate = 5.0 }
        },
        
        staircase = {
            type = "building",
            size = { width = 5, height = 2 },
            properties = { floor_destination = 1 }
        },
        
        megafactory = {
            type = "building",
            size = { width = 5, height = 5 },
            properties = { production_rate = 20.0 }
        },
        
        long_belt = {
            type = "building",
            size = { width = 8, height = 1 },
            properties = { speed = 15.0 }
        }
    }
    
    sim.register_entity_templates(entity_templates)
    print("Registered building templates")
    
    -- Store building IDs for testing
    self.building_ids = {}
    
    -- Test different floor scenarios
    self.test_floor = 0
end

function update(self, dt)
    -- Optional: Add any continuous testing here
end

-- Helper function to verify simulation data
local function verify_building_simulation(building_name, entity_id)
    print(string.format("=== VERIFYING %s SIMULATION DATA ===", building_name:upper()))
    
    local entity = sim.get_entity(entity_id)
    if not entity then
        print("ERROR: Entity not found!")
        return
    end
    
    print(string.format("Entity ID: %d", entity_id))
    print(string.format("Stored position: (%.1f, %.1f)", entity.grid_x, entity.grid_y))
    print(string.format("Stored size: %dx%d", entity.width, entity.height))
    print(string.format("Stored floor: %d", entity.floor_z))
    
    -- Query simulation for occupied tiles
    local occupied_tiles = sim.get_entity_occupied_tiles(entity_id)
    print(string.format("Simulation says occupied tiles: %d", #occupied_tiles))
    for i, tile in ipairs(occupied_tiles) do
        print(string.format("  Tile %d: (%d, %d)", i, tile[1], tile[2]))
    end
    
    -- Query simulation for occupied chunks
    local occupied_chunks = sim.get_entity_occupied_chunks(entity_id)
    print(string.format("Simulation says occupied chunks: %d", #occupied_chunks))
    for i, chunk in ipairs(occupied_chunks) do
        print(string.format("  Chunk %d: (%d, %d)", i, chunk[1], chunk[2]))
    end
    
    -- Test tile queries
    print("Testing tile queries:")
    for i, tile in ipairs(occupied_tiles) do
        local entities_at_tile = sim.get_entities_at_tile(entity.floor_z, tile[1], tile[2])
        print(string.format("  Tile (%d, %d): %d entities", tile[1], tile[2], #entities_at_tile))
        for j, tile_entity_id in ipairs(entities_at_tile) do
            print(string.format("    Entity %d: ID %d", j, tile_entity_id))
        end
    end
    
    print("==========================================")
end

function on_input(self, action_id, action)
    if action_id == hash("key_1") and action.pressed then
        -- Test 1: Single tile building
        local building_id = sim.create_entity("conveyor", 5, 5, self.test_floor)
        if building_id > 0 then
            self.building_ids["conveyor"] = building_id
            print("Created 1x1 conveyor at grid (5, 5) on floor " .. self.test_floor)
        else
            print("FAILED to create conveyor")
        end
        
    elseif action_id == hash("key_2") and action.pressed then
        -- Test 2: 3x3 factory
        local building_id = sim.create_entity("factory", 10, 10, self.test_floor)
        if building_id > 0 then
            self.building_ids["factory"] = building_id
            print("Created 3x3 factory at grid (10, 10) on floor " .. self.test_floor)
            verify_building_simulation("factory", building_id)
        else
            print("FAILED to create factory")
        end
        
    elseif action_id == hash("key_3") and action.pressed then
        -- Test 3: 5x2 staircase
        local building_id = sim.create_entity("staircase", 15, 15, self.test_floor)
        if building_id > 0 then
            self.building_ids["staircase"] = building_id
            print("Created 5x2 staircase at grid (15, 15) on floor " .. self.test_floor)
        else
            print("FAILED to create staircase")
        end
        
    elseif action_id == hash("key_4") and action.pressed then
        -- Test 4: 5x5 megafactory
        local building_id = sim.create_entity("megafactory", 20, 20, self.test_floor)
        if building_id > 0 then
            self.building_ids["megafactory"] = building_id
            print("Created 5x5 megafactory at grid (20, 20) on floor " .. self.test_floor)
        else
            print("FAILED to create megafactory")
        end
        
    elseif action_id == hash("key_5") and action.pressed then
        -- Test 5: 8x1 long belt (spans multiple chunks)
        local building_id = sim.create_entity("long_belt", 25, 25, self.test_floor)
        if building_id > 0 then
            self.building_ids["long_belt"] = building_id
            print("Created 8x1 long belt at grid (25, 25) on floor " .. self.test_floor)
        else
            print("FAILED to create long belt")
        end
        
    elseif action_id == hash("key_c") and action.pressed then
        -- Test chunk boundaries: Place building at chunk edge
        local building_id = sim.create_entity("factory", 32, 32, self.test_floor)
        if building_id > 0 then
            self.building_ids["chunk_edge_factory"] = building_id
            print("Created 3x3 factory at chunk boundary (32, 32) on floor " .. self.test_floor)
        else
            print("FAILED to create chunk edge factory")
        end
        
    elseif action_id == hash("key_f") and action.pressed then
        -- Test floor switching
        self.test_floor = self.test_floor + 1
        print("Switched to floor " .. self.test_floor)
        
    elseif action_id == hash("key_g") and action.pressed then
        -- Test floor switching down
        self.test_floor = self.test_floor - 1
        print("Switched to floor " .. self.test_floor)
        
    elseif action_id == hash("key_i") and action.pressed then
        -- Test invalid placement: Try to place overlapping buildings
        local building_id1 = sim.create_entity("factory", 30, 30, self.test_floor)
        if building_id1 > 0 then
            print("Created first factory at (30, 30)")
            local building_id2 = sim.create_entity("factory", 31, 31, self.test_floor)
            if building_id2 > 0 then
                print("WARNING: Overlapping buildings created!")
            else
                print("Correctly blocked overlapping building")
            end
        end
        
    elseif action_id == hash("key_t") and action.pressed then
        -- Test tower floor limits: Try to place large building on tower floor
        local tower_floor = 1  -- Tower floor with 2x2 chunk limit
        local building_id = sim.create_entity("megafactory", 0, 0, tower_floor)
        if building_id > 0 then
            print("Created 5x5 megafactory on tower floor " .. tower_floor)
        else
            print("Correctly blocked megafactory on tower floor (too large)")
        end
        
    elseif action_id == hash("key_p") and action.pressed then
        -- Print all buildings info
        print("=== BUILDING INFO ===")
        for name, id in pairs(self.building_ids) do
            local entity = sim.get_entity(id)
            if entity then
                print(string.format("%s (ID: %d): grid (%.1f, %.1f) size %dx%d floor %d", 
                                   name, id, entity.grid_x, entity.grid_y, entity.width, entity.height, entity.floor_z))
            else
                print(name .. " (ID: " .. id .. "): NOT FOUND")
            end
        end
        
    elseif action_id == hash("key_r") and action.pressed then
        -- Reset test floor
        self.test_floor = 0
        print("Reset to floor 0")
        
    elseif action_id == hash("key_v") and action.pressed then
        -- Verify all buildings
        print("=== VERIFYING ALL BUILDINGS ===")
        for name, id in pairs(self.building_ids) do
            verify_building_simulation(name, id)
        end
    end
end

function on_message(self, message_id, message, sender)
    -- Handle messages if needed
end

function final(self)
    -- Cleanup
end
