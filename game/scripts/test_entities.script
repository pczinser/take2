function init(self)
    msg.post(".", "acquire_input_focus")
    -- Register entity templates
    local entity_templates = {
        player = {
            type = "player",
            properties = { move_speed = 100.0 },
            int_properties = { inventory_size = 50 }
        },
        
        building = {
            type = "building",
            properties = { production_rate = 10.0 },
            int_properties = { health = 100 }
        }
    }
    
    sim.register_entity_templates(entity_templates)
    
    -- Create a building at a fixed position (chunk 1,1)
    self.building_id = sim.create_entity("building", 50, 50)
    print("Created building with ID: " .. self.building_id .. " at (50, 50)")
    
    -- Create player at origin
    self.player_id = sim.create_entity("player", 0, 0)
    print("Created player with ID: " .. self.player_id .. " at (0, 0)")
    
    -- Set up observer for player
    self.observer_id = sim.set_observer(0, 0, 0, 32, 64, 0, 1)
    
    -- Movement state
    self.move_dx = 0
    self.move_dy = 0
    
    -- Test initial chunk state
    self:test_chunk_state()
end

function update(self, dt)
    -- Move player
    if self.move_dx ~= 0 or self.move_dy ~= 0 then
        local player = sim.get_entity(self.player_id)
        if player then
            local move_speed = player.properties.move_speed
            sim.move_entity(self.player_id, self.move_dx * move_speed * dt, self.move_dy * move_speed * dt)
            sim.move_observer(self.observer_id, 0, player.x, player.y)
        end
    end
    
    -- Update player position
    local player = sim.get_entity(self.player_id)
    if player then
        go.set_position(vmath.vector3(player.x, player.y, 0), self.id)
    end
end

function on_input(self, action_id, action)
    -- Movement controls
    if action_id == hash("key_w") then
        if action.pressed then self.move_dy = self.move_dy - 1
        elseif action.released then self.move_dy = self.move_dy + 1 end
    elseif action_id == hash("key_s") then
        if action.pressed then self.move_dy = self.move_dy + 1
        elseif action.released then self.move_dy = self.move_dy - 1 end
    elseif action_id == hash("key_a") then
        if action.pressed then self.move_dx = self.move_dx - 1
        elseif action.released then self.move_dx = self.move_dx + 1 end
    elseif action_id == hash("key_d") then
        if action.pressed then self.move_dx = self.move_dx + 1
        elseif action.released then self.move_dx = self.move_dx - 1 end
    end

    if action_id == hash("key_p") and action.pressed then
    -- Debug output
        local player = sim.get_entity(self.player_id)
        if player then
            print(string.format("Player at: (%.1f, %.1f)", player.x, player.y))
        end
    end
    
    -- Test chunk state
    if action_id == hash("key_t") and action.pressed then
        self:test_chunk_state()
    end
    
    -- Teleport player back to building
    if action_id == hash("key_r") and action.pressed then
        sim.move_entity(self.player_id, 50, 50)
        print("Teleported player back to building")
    end
end

function test_chunk_state(self)
    print("=== CHUNK STATE TEST ===")
    
    -- Get player position
    local player = sim.get_entity(self.player_id)
    local building = sim.get_entity(self.building_id)
    
    if player and building then
        print(string.format("Player at: (%.1f, %.1f) chunk (%d, %d)", 
                           player.x, player.y, player.chunk_x, player.chunk_y))
        print(string.format("Building at: (%.1f, %.1f) chunk (%d, %d)", 
                           building.x, building.y, building.chunk_x, building.chunk_y))
        
        -- Check entities in building's chunk
        local building_chunk_entities = sim.get_entities_in_chunk(0, building.chunk_x, building.chunk_y)
        print(string.format("Entities in building chunk (%d, %d): %d", 
                           building.chunk_x, building.chunk_y, #building_chunk_entities))
        
        -- Check entities in player's chunk
        local player_chunk_entities = sim.get_entities_in_chunk(0, player.chunk_x, player.chunk_y)
        print(string.format("Entities in player chunk (%d, %d): %d", 
                           player.chunk_x, player.chunk_y, #player_chunk_entities))
        
        -- Check entities near building
        local nearby_entities = sim.get_entities_in_radius(building.x, building.y, 100)
        print(string.format("Entities within 100 units of building: %d", #nearby_entities))
        
        -- Check if building is still there
        local building_still_exists = sim.get_entity(self.building_id)
        if building_still_exists then
            print("Building still exists in simulation")
        else
            print("ERROR: Building disappeared!")
        end
    end
    
    print("=======================")
end
