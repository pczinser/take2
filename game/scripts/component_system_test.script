-- Component System Test Script
-- Comprehensive testing of the new component-based entity system

function init(self)
    msg.post(".", "acquire_input_focus")
    print("=== COMPONENT SYSTEM TEST SUITE ===")
    
    -- Initialize test state
    self.test_results = {}
    self.entities_created = {}
    self.current_test = 0
    self.total_tests = 12
    
    print("Press number keys 1-9 to run individual tests")
    print("Press 0 to run all tests")
    print("Press T to show test results summary")
    print("=====================================")
end

-- Test result tracking
local function record_test(self, test_name, success, message)
    self.test_results[test_name] = {
        success = success,
        message = message or ""
    }
    
    local status = success and "PASS" or "FAIL"
    print(string.format("[%s] %s: %s", status, test_name, message or ""))
end

-- Test 1: Entity Creation
local function test_entity_creation(self)
    print("\n--- Test 1: Entity Creation ---")
    
    -- Test creating different entity types
    local player_id = sim.create_entity("player", 10, 10, 0)
    local building_id = sim.create_entity("building", 20, 20, 0)
    
    self.entities_created.player = player_id
    self.entities_created.building = building_id
    
    if player_id > 0 and building_id > 0 then
        record_test(self, "Entity Creation", true, string.format("Created player %d and building %d", player_id, building_id))
    else
        record_test(self, "Entity Creation", false, string.format("Failed: player_id=%d, building_id=%d", player_id, building_id))
    end
end

-- Test 2: Component Access
local function test_component_access(self)
    print("\n--- Test 2: Component Access ---")
    
    if not self.entities_created.player then
        record_test(self, "Component Access", false, "No player entity to test")
        return
    end
    
    local player_id = self.entities_created.player
    
    -- Test metadata component
    local metadata = sim.get_entity_metadata(player_id)
    local metadata_ok = metadata and metadata.display_name
    
    -- Test transform component
    local transform = sim.get_entity_transform(player_id)
    local transform_ok = transform and transform.grid_x == 10 and transform.grid_y == 10
    
    -- Test movement component
    local movement = sim.get_entity_movement(player_id)
    local movement_ok = movement and movement.move_speed > 0
    
    if metadata_ok and transform_ok and movement_ok then
        record_test(self, "Component Access", true, string.format("Metadata: '%s', Transform: (%.1f,%.1f), Movement: %.1f", 
                   metadata.display_name, transform.grid_x, transform.grid_y, movement.move_speed))
    else
        record_test(self, "Component Access", false, string.format("metadata_ok=%s, transform_ok=%s, movement_ok=%s", 
                   tostring(metadata_ok), tostring(transform_ok), tostring(movement_ok)))
    end
end

-- Test 3: Observer System
local function test_observer_system(self)
    print("\n--- Test 3: Observer System ---")
    
    -- Create observer
    local observer_id = sim.set_observer(0, 5, 5, 32, 64, 0, 1)
    self.entities_created.observer = observer_id
    
    if observer_id > 0 then
        -- Test moving observer
        sim.move_observer(observer_id, 0, 10, 10)
        record_test(self, "Observer System", true, string.format("Created observer %d and moved it", observer_id))
    else
        record_test(self, "Observer System", false, "Failed to create observer")
    end
end

-- Test 4: Chunk Queries
local function test_chunk_queries(self)
    print("\n--- Test 4: Chunk Queries ---")
    
    -- Create entities in specific chunks
    local entity1 = sim.create_entity("building", 0, 0, 0)    -- Chunk (0,0)
    local entity2 = sim.create_entity("building", 32, 32, 0)  -- Chunk (1,1)
    local entity3 = sim.create_entity("building", 5, 5, 0)    -- Chunk (0,0)
    
    self.entities_created.test_building1 = entity1
    self.entities_created.test_building2 = entity2
    self.entities_created.test_building3 = entity3
    
    -- Query chunk (0,0) - should have entity1 and entity3
    local chunk_00_entities = sim.get_entities_in_chunk(0, 0, 0)
    local chunk_00_count = #chunk_00_entities
    
    -- Query chunk (1,1) - should have entity2
    local chunk_11_entities = sim.get_entities_in_chunk(0, 1, 1)
    local chunk_11_count = #chunk_11_entities
    
    -- Should find at least the entities we created (might find others too)
    local chunk_00_has_entity1 = false
    local chunk_00_has_entity3 = false
    for _, id in ipairs(chunk_00_entities) do
        if id == entity1 then chunk_00_has_entity1 = true end
        if id == entity3 then chunk_00_has_entity3 = true end
    end
    
    local chunk_11_has_entity2 = false
    for _, id in ipairs(chunk_11_entities) do
        if id == entity2 then chunk_11_has_entity2 = true end
    end
    
    if chunk_00_has_entity1 and chunk_00_has_entity3 and chunk_11_has_entity2 then
        record_test(self, "Chunk Queries", true, string.format("Chunk (0,0): %d entities, Chunk (1,1): %d entities", 
                   chunk_00_count, chunk_11_count))
    else
        record_test(self, "Chunk Queries", false, string.format("Missing entities in chunks. (0,0) has e1=%s e3=%s, (1,1) has e2=%s", 
                   tostring(chunk_00_has_entity1), tostring(chunk_00_has_entity3), tostring(chunk_11_has_entity2)))
    end
end

-- Test 5: Radius Queries
local function test_radius_queries(self)
    print("\n--- Test 5: Radius Queries ---")
    
    -- Query entities near (10, 10) with radius 5
    local nearby_entities = sim.get_entities_in_radius(10, 10, 5.0)
    local nearby_count = #nearby_entities
    
    -- Should find our player at (10, 10)
    local found_player = false
    if self.entities_created.player then
        for _, id in ipairs(nearby_entities) do
            if id == self.entities_created.player then
                found_player = true
                break
            end
        end
    end
    
    record_test(self, "Radius Queries", found_player, string.format("Found %d entities near (10,10), player found: %s", 
               nearby_count, tostring(found_player)))
end

-- Test 6: Floor Queries
local function test_floor_queries(self)
    print("\n--- Test 6: Floor Queries ---")
    
    -- Create entity on different floor
    local entity_floor1 = sim.create_entity("building", 50, 50, 1)
    self.entities_created.floor1_building = entity_floor1
    
    -- Query entities on floor 0
    local floor0_entities = sim.get_entities_on_floor(0)
    local floor0_count = #floor0_entities
    
    -- Query entities on floor 1
    local floor1_entities = sim.get_entities_on_floor(1)
    local floor1_count = #floor1_entities
    
    -- Check if our entities are on correct floors
    local floor0_has_player = false
    local floor1_has_building = false
    
    for _, id in ipairs(floor0_entities) do
        if id == self.entities_created.player then floor0_has_player = true end
    end
    
    for _, id in ipairs(floor1_entities) do
        if id == entity_floor1 then floor1_has_building = true end
    end
    
    if floor0_has_player and floor1_has_building then
        record_test(self, "Floor Queries", true, string.format("Floor 0: %d entities, Floor 1: %d entities", 
                   floor0_count, floor1_count))
    else
        record_test(self, "Floor Queries", false, string.format("Floor separation failed. Floor0 has player=%s, Floor1 has building=%s", 
                   tostring(floor0_has_player), tostring(floor1_has_building)))
    end
end

-- Test 7: Entity Movement
local function test_entity_movement(self)
    print("\n--- Test 7: Entity Movement ---")
    
    if not self.entities_created.player then
        record_test(self, "Entity Movement", false, "No player entity to test")
        return
    end
    
    local player_id = self.entities_created.player
    
    -- Get initial position
    local initial_transform = sim.get_entity_transform(player_id)
    if not initial_transform then
        record_test(self, "Entity Movement", false, "Could not get initial transform")
        return
    end
    
    local initial_x = initial_transform.grid_x
    local initial_y = initial_transform.grid_y
    
    -- Move entity
    sim.move_entity(player_id, 5, 3)
    
    -- Get new position
    local new_transform = sim.get_entity_transform(player_id)
    if not new_transform then
        record_test(self, "Entity Movement", false, "Could not get new transform after movement")
        return
    end
    
    local expected_x = initial_x + 5
    local expected_y = initial_y + 3
    local movement_correct = (math.abs(new_transform.grid_x - expected_x) < 0.1) and 
                            (math.abs(new_transform.grid_y - expected_y) < 0.1)
    
    if movement_correct then
        record_test(self, "Entity Movement", true, string.format("Moved from (%.1f,%.1f) to (%.1f,%.1f)", 
                   initial_x, initial_y, new_transform.grid_x, new_transform.grid_y))
    else
        record_test(self, "Entity Movement", false, string.format("Expected (%.1f,%.1f), got (%.1f,%.1f)", 
                   expected_x, expected_y, new_transform.grid_x, new_transform.grid_y))
    end
end

-- Test 8: Inventory System Integration
local function test_inventory_system(self)
    print("\n--- Test 8: Inventory System ---")
    
    -- Create inventory manually
    local inventory_id = sim.inventory_create(0, 50)  -- INVENTORY_PLAYER, capacity 50
    
    if inventory_id > 0 then
        -- Test adding items
        local add_success = sim.inventory_add_items(inventory_id, 0, 10)  -- Add 10 stone
        local item_count = sim.inventory_get_item_count(inventory_id, 0)   -- Check stone count
        
        if add_success and item_count == 10 then
            record_test(self, "Inventory System", true, string.format("Created inventory %d, added 10 stone, count: %d", 
                       inventory_id, item_count))
        else
            record_test(self, "Inventory System", false, string.format("Add failed=%s, expected 10 stone, got %d", 
                       tostring(not add_success), item_count))
        end
    else
        record_test(self, "Inventory System", false, "Failed to create inventory")
    end
end

-- Test 9: Building Placement
local function test_building_placement(self)
    print("\n--- Test 9: Building Placement ---")
    
    -- Test valid placement
    local valid_building = sim.create_entity("building", 100, 100, 0)
    
    -- Test invalid placement (overlapping)
    local invalid_building = sim.create_entity("building", 100, 100, 0)  -- Same position
    
    if valid_building > 0 and invalid_building <= 0 then
        record_test(self, "Building Placement", true, "Valid placement succeeded, overlapping placement blocked")
        self.entities_created.placement_test = valid_building
    elseif valid_building > 0 and invalid_building > 0 then
        record_test(self, "Building Placement", false, "Overlapping placement was allowed (should be blocked)")
    else
        record_test(self, "Building Placement", false, "Valid placement failed")
    end
end

-- Test 10: Multi-Floor System
local function test_multi_floor(self)
    print("\n--- Test 10: Multi-Floor System ---")
    
    -- Test floor management
    local initial_floor = sim.get_current_floor()
    sim.set_current_floor(2)
    local new_floor = sim.get_current_floor()
    sim.set_current_floor(initial_floor)  -- Reset
    
    -- Create entities on different floors
    local floor0_entity = sim.create_entity("building", 200, 200, 0)
    local floor2_entity = sim.create_entity("building", 200, 200, 2)
    
    self.entities_created.floor0_test = floor0_entity
    self.entities_created.floor2_test = floor2_entity
    
    if new_floor == 2 and floor0_entity > 0 and floor2_entity > 0 then
        record_test(self, "Multi-Floor System", true, string.format("Floor switching works, created entities on floors 0 and 2"))
    else
        record_test(self, "Multi-Floor System", false, string.format("Floor=%d (expected 2), floor0_entity=%d, floor2_entity=%d", 
                   new_floor, floor0_entity, floor2_entity))
    end
end

-- Test 11: Spatial Query Performance
local function test_spatial_performance(self)
    print("\n--- Test 11: Spatial Query Performance ---")
    
    -- Create many entities for performance testing
    local start_time = socket.gettime()
    local created_entities = {}
    
    for i = 1, 50 do
        local x = (i % 10) * 10
        local y = math.floor(i / 10) * 10
        local entity_id = sim.create_entity("building", x, y, 0)
        if entity_id > 0 then
            table.insert(created_entities, entity_id)
        end
    end
    
    local creation_time = socket.gettime() - start_time
    
    -- Test chunk query performance
    start_time = socket.gettime()
    local chunk_entities = sim.get_entities_in_chunk(0, 0, 0)
    local chunk_query_time = socket.gettime() - start_time
    
    -- Test radius query performance
    start_time = socket.gettime()
    local radius_entities = sim.get_entities_in_radius(25, 25, 50)
    local radius_query_time = socket.gettime() - start_time
    
    self.entities_created.performance_test = created_entities
    
    if creation_time < 1.0 and chunk_query_time < 0.01 and radius_query_time < 0.1 then
        record_test(self, "Spatial Performance", true, string.format("Created 50 entities in %.3fs, chunk query: %.3fs, radius query: %.3fs", 
                   creation_time, chunk_query_time, radius_query_time))
    else
        record_test(self, "Spatial Performance", false, string.format("Too slow: creation=%.3fs, chunk=%.3fs, radius=%.3fs", 
                   creation_time, chunk_query_time, radius_query_time))
    end
end

-- Test 12: Template System
local function test_template_system(self)
    print("\n--- Test 12: Template System ---")
    
    -- Register custom template
    local custom_templates = {
        test_extractor = {
            display_name = "Test Extractor",
            category = "building",
            components = {
                metadata = {
                    display_name = "Custom Test Extractor"
                },
                building = {
                    width = 2,
                    height = 2,
                    building_type = "extractor"
                },
                production = {
                    extraction_rate = 5.0,
                    target_resource = 0  -- ITEM_STONE
                },
                inventory = {
                    slots = {
                        { type = 2, capacity = 200 }  -- INVENTORY_OUTPUT_SLOT
                    }
                }
            }
        }
    }
    
    sim.register_entity_templates(custom_templates)
    
    -- Create entity from custom template
    local custom_entity = sim.create_entity("test_extractor", 300, 300, 0)
    self.entities_created.custom_test = custom_entity
    
    if custom_entity > 0 then
        local metadata = sim.get_entity_metadata(custom_entity)
        if metadata and metadata.display_name == "Custom Test Extractor" then
            record_test(self, "Template System", true, "Custom template registered and entity created successfully")
        else
            record_test(self, "Template System", false, "Custom template created entity but metadata incorrect")
        end
    else
        record_test(self, "Template System", false, "Failed to create entity from custom template")
    end
end

-- Show test results summary
local function show_test_summary(self)
    print("\n=== TEST RESULTS SUMMARY ===")
    
    local total_tests = 0
    local passed_tests = 0
    
    for test_name, result in pairs(self.test_results) do
        total_tests = total_tests + 1
        if result.success then
            passed_tests = passed_tests + 1
            print(string.format("✅ %s", test_name))
        else
            print(string.format("❌ %s: %s", test_name, result.message))
        end
    end
    
    print(string.format("\nPASSED: %d/%d tests (%.1f%%)", passed_tests, total_tests, (passed_tests/total_tests)*100))
    
    if passed_tests == total_tests then
        print("🎉 ALL TESTS PASSED! Component system is working correctly.")
    else
        print("⚠️  Some tests failed. Component system needs fixes.")
    end
    
    print("==============================")
end

-- Run all tests
local function run_all_tests(self)
    print("\n🧪 RUNNING ALL TESTS...")
    
    test_entity_creation(self)
    test_component_access(self)
    test_observer_system(self)
    test_chunk_queries(self)
    test_radius_queries(self)
    test_floor_queries(self)
    test_entity_movement(self)
    test_inventory_system(self)
    test_building_placement(self)
    test_multi_floor(self)
    test_spatial_performance(self)
    test_template_system(self)
    
    show_test_summary(self)
end

function on_input(self, action_id, action)
    if not action.pressed then return end
    
    if action_id == hash("key_1") then
        test_entity_creation(self)
    elseif action_id == hash("key_2") then
        test_component_access(self)
    elseif action_id == hash("key_3") then
        test_observer_system(self)
    elseif action_id == hash("key_4") then
        test_chunk_queries(self)
    elseif action_id == hash("key_5") then
        test_radius_queries(self)
    elseif action_id == hash("key_6") then
        test_floor_queries(self)
    elseif action_id == hash("key_7") then
        test_entity_movement(self)
    elseif action_id == hash("key_8") then
        test_inventory_system(self)
    elseif action_id == hash("key_9") then
        test_building_placement(self)
    elseif action_id == hash("key_0") then
        run_all_tests(self)
    elseif action_id == hash("key_t") then
        show_test_summary(self)
    elseif action_id == hash("key_c") then
        -- Clear test results
        self.test_results = {}
        self.entities_created = {}
        print("Test results cleared")
    elseif action_id == hash("key_h") then
        -- Help
        print("\n=== TEST CONTROLS ===")
        print("1: Entity Creation")
        print("2: Component Access") 
        print("3: Observer System")
        print("4: Chunk Queries")
        print("5: Radius Queries")
        print("6: Floor Queries")
        print("7: Entity Movement")
        print("8: Inventory System")
        print("9: Building Placement")
        print("0: Run All Tests")
        print("T: Show Results Summary")
        print("C: Clear Results")
        print("H: Show Help")
        print("====================")
    end
end

function update(self, dt)
    -- Let the simulation run
end

function on_message(self, message_id, message, sender)
    -- Handle any messages
end

function final(self)
    print("Component system test script terminated")
end